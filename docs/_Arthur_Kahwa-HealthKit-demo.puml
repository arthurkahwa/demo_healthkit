@startuml

' STYLE START
skinparam defaultTextAlignment center
skinparam horizontalAlignment left
skinparam defaultFontSize 10
skinparam padding 10
hide empty members
skinparam shadowing false
' STYLE END
set namespaceSeparator none


class "ahowCaseHealthKitUITests" as ahowCaseHealthKitUITests << (C, DarkSeaGreen) >> { 
  ~setUpWithError()
  ~tearDownWithError()
  ~testExample()
  ~testLaunchPerformance() 
}
class "ahowCaseHealthKitUITestsLaunchTests" as ahowCaseHealthKitUITestsLaunchTests << (C, DarkSeaGreen) >> { 
  ~setUpWithError()
  ~testLaunch() 
}
class "ahowCaseHealthKitTests" as ahowCaseHealthKitTests << (C, DarkSeaGreen) >> { 
  ~setUpWithError()
  ~tearDownWithError()
  ~testExample()
  ~testPerformanceExample() 
}
class "ahowCaseHealthKitApp" as ahowCaseHealthKitApp << (S, SkyBlue) struct >> { 
  ~hkManager
  ~body : some Scene 
}
class "HealthMetricContext" as HealthMetricContext << (E, LightSteelBlue) enum >> { 
  ~id : Self
  ~steps
  ~weight
  ~title : String 
}
class "StepTrackerError" as StepTrackerError << (E, LightSteelBlue) enum >> { 
  ~authNotDetermined
  ~sharingDenied(quantityType:)
  ~noData
  ~unableToCompleteRequest
  ~invalidValue
  ~errorDescription : String?
  ~failureReason : String 
}
class "HealthKitManager" as HealthKitManager << (C, DarkSeaGreen) >> { 
  ~store
  ~stepData : [HealthMetric]
  ~weightData : [HealthMetric]
  ~weightDiffData : [HealthMetric]
  ~types : Set
  ~fetchStepCount()
  ~fetchWeightData()
  ~fetchWeightDataForDifferencials()
  ~addStepData(for:value:)
  ~addWeightData(for:value:)
  ~addData(for:stepValue:)
  ~addData(for:weightValue:)
  ~addSimulatorData() 
}
class "HealthMetric" as HealthMetric << (S, SkyBlue) struct >> { 
  ~id
  ~date : Date
  ~value : Double 
}
class "DashboardView" as DashboardView << (S, SkyBlue) struct >> { 
  -hkManager
  -isShowingPermissionPrimingSheet
  -selectedStat : HealthMetricContext
  -isShowingAlert
  -fetchError : StepTrackerError
  ~isSteps : Bool
  ~body : some View 
}
class "WeightDiffBarChart" as WeightDiffBarChart << (S, SkyBlue) struct >> { 
  ~chartData : [DateValueChartData]
  -rawSelectedDate : Date?
  -selectedDay : Date?
  ~selectedData : DateValueChartData?
  ~body : some View 
}
class "ChartAnnotationView" as ChartAnnotationView << (S, SkyBlue) struct >> { 
  ~data : DateValueChartData
  ~context : HealthMetricContext
  ~body : some View 
}
class "ChartContainer" as ChartContainer<Content: View> << (S, SkyBlue) struct >> { 
  ~title : String
  ~symbol : String
  ~subTitle : String
  ~context : HealthMetricContext
  ~isNavigation : Bool
  ~content : () -> Content
  ~body : some View
  ~navigationLinkView : some View
  ~titleView : some View 
}
class "StepPieChart" as StepPieChart << (S, SkyBlue) struct >> { 
  ~chartData : [DateValueChartData]
  -rawSelectedChartValue : Double?
  -selectedDay : Date?
  ~selectedWeekDay : DateValueChartData?
  ~body : some View 
}
class "ChartHelper" as ChartHelper << (S, SkyBlue) struct >> { 
  ~{static} convert(data:)
  ~{static} average(for:)
  ~{static} parseSelectedData(from:in:) 
}
class "StepBarChart" as StepBarChart << (S, SkyBlue) struct >> { 
  ~chartData : [DateValueChartData]
  ~selectedData : DateValueChartData?
  -rawSelectedDate : Date?
  -selectedDay : Date?
  ~body : some View 
}
class "ChartEmptyView" as ChartEmptyView << (S, SkyBlue) struct >> { 
  ~systemImageName : String
  ~title : String
  ~description : String
  ~body : some View 
}
class "WeightLineChart" as WeightLineChart << (S, SkyBlue) struct >> { 
  ~chartData : [DateValueChartData]
  -rawSelectedDate : Date?
  -selectedDay : Date?
  ~minChartDataValue : Double
  ~selectedData : DateValueChartData?
  ~body : some View 
}
class "HealthDetailListView" as HealthDetailListView << (S, SkyBlue) struct >> { 
  -hkManager
  -isShowingAddData
  -isShowingAlert
  -addDataDate : Date
  -writeError : StepTrackerError
  -valueToAdd
  ~isShowingPermissionPriming : Bool
  ~metric : HealthMetricContext
  ~listData : [HealthMetric]
  ~body : some View
  ~addDataView : some View 
}
class "HealthKitPermissionPrimingView" as HealthKitPermissionPrimingView << (S, SkyBlue) struct >> { 
  -dismiss
  -hkmanager
  -isShowingHealthKitPermissions
  ~description
  ~body : some View 
}
class "DateValueChartData" as DateValueChartData << (S, SkyBlue) struct >> { 
  ~id
  ~date : Date
  ~value : Double 
}
class "ChartMath" as ChartMath << (S, SkyBlue) struct >> { 
  ~{static} averageWeekdayCount(for:)
  ~{static} averageDailyWeightDifferences(for:) 
}
class "MockData" as MockData << (S, SkyBlue) struct >> { 
  ~{static} steps : [HealthMetric]
  ~{static} weight : [HealthMetric]
  ~{static} weightDiffs : [DateValueChartData] 
}
class "Date" as Date << (X, Orchid) extension >> { 
  ~weekDayInt : Int
  ~weekdayTitle : String 
}
XCTestCase <|-- ahowCaseHealthKitUITests : inherits
XCTestCase <|-- ahowCaseHealthKitUITestsLaunchTests : inherits
XCTestCase <|-- ahowCaseHealthKitTests : inherits
App <|-- ahowCaseHealthKitApp : inherits
CaseIterable -- HealthMetricContext : inherits
Identifiable -- HealthMetricContext : inherits
LocalizedError -- StepTrackerError : inherits
Identifiable <|-- HealthMetric : inherits
View <|-- DashboardView : inherits
View <|-- WeightDiffBarChart : inherits
View <|-- ChartAnnotationView : inherits
View <|-- ChartContainer : inherits
View <|-- StepPieChart : inherits
View <|-- StepBarChart : inherits
View <|-- ChartEmptyView : inherits
View <|-- WeightLineChart : inherits
View <|-- HealthDetailListView : inherits
View <|-- HealthKitPermissionPrimingView : inherits
Identifiable <|-- DateValueChartData : inherits
Equatable <|-- DateValueChartData : inherits

@enduml

